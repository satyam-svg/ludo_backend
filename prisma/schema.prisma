generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  phoneNumber  String        @unique
  password     String
  wallet       Float         @default(0)
  referralCode String?       @unique
  role         String        @default("Customer")
  gameSessions GameSession[]
  games        Game[]
  matkaBets    MatkaBet[]
  referredBy   Referral?     @relation("Referee")
  referrals    Referral[]    @relation("Referrer")
  transactions Transaction[]
  withdrawals  Withdrawal[]

  @@map("users")
}

model Referral {
  id         String   @id @default(uuid())
  referrerId String
  refereeId  String   @unique
  createdAt  DateTime @default(now())
  referee    User     @relation("Referee", fields: [refereeId], references: [id])
  referrer   User     @relation("Referrer", fields: [referrerId], references: [id])

  @@map("referrals")
}

model Game {
  id        String   @id @default(uuid())
  userId    String
  score     Int
  duration  Int
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("games")
}

model Transaction {
  id          String   @id @default(uuid())
  userId      String
  amount      Float
  type        String   @default("deposit")
  gameId      String?
  description String?
  createdAt   DateTime @default(now())
  reference   String?  @unique
  user        User     @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Withdrawal {
  id        String   @id @default(uuid())
  userId    String
  amount    Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("withdrawals")
}

model GameSession {
  id          String    @id @default(uuid())
  gameId      String    @unique
  userId      String
  gameType    String
  stake       Float
  luckyNumber Int?
  winAmount   Float?
  status      String    @default("active")
  result      String?
  rollHistory String?
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])

  @@map("game_sessions")
}

model MatkaSlot {
  id        String     @id @default(uuid())
  slotId    String
  slotName  String
  slotDate  DateTime
  startTime String
  endTime   String
  status    String
  result    Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bets      MatkaBet[]

  @@map("matka_slots")
}

model MatkaBet {
  id             String    @id @default(uuid())
  userId         String
  matkaSlotId    String
  selectedNumber Int
  stakeAmount    Float
  winAmount      Float?
  status         String
  createdAt      DateTime  @default(now())
  slot           MatkaSlot @relation(fields: [matkaSlotId], references: [id])
  user           User      @relation(fields: [userId], references: [id])

  @@map("matka_bets")
}
